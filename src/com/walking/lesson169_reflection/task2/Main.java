package com.walking.lesson169_reflection.task2;

import java.util.List;
import java.util.Map;

/**
 * Реализуйте метод, который принимает параметром список классов и возвращает
 * <code>Map{@literal <}Class{@literal <}?>, Object></code>. При этом:
 *
 * <ol>
 * <li> Каждый из передаваемых в метод классов должен иметь один публичный конструктор.
 *      Наличие параметров опционально;</li>
 * <li> Любой класс <code>A</code> может принимать одним из параметров объект класса <code>B</code> только при условии,
 *      что <code>B</code> также указан всписке передаваемых в метод классов;</li>
 * <li> Если возникает любого рода циклическая зависимость: конструктор <code>A</code> принимает параметром
 *      объект <code>B</code>, а конструктор <code>B</code> принимает параметром объект <code>A</code> -
 *      должно быть выброшено исключение. Актуально также и для неявных циклических зависимостей
 *      (<code>A</code> для создания требует объект <code>B</code>, <code>B</code> - требует <code>C</code>,
 *      <code>C</code> требует <code>A</code>) любой глубины;</li>
 * <li> Параметром конструктора могут быть переданы только объекты, которые будут состоять в составе возвращаемого
 *    объекта <code>Map</code>. Таким образом любой объект определенного класса (из входящего списка) должен быть
 *    создан единожды, независимо от того, сколько раз он будет передаваться как параметр конструктора в объекты
 *    других классов из списка.</li>
 * </ol>
 */
public class Main {
    public static void main(String[] args) {
    }

    public static Map<Class<?>, Object> createObjects(List<Class<?>> classes) {
        return null;
    }
}
